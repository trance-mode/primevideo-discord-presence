// === src/bin/pvdp_uninstaller.rs ===

use std::fs;
use std::fs::OpenOptions;
use std::path::PathBuf;
use std::process::Command;
use eframe::{egui, NativeOptions};
use egui::{FontData, FontDefinitions, FontFamily, ViewportBuilder};
use winreg::enums::*;
use winreg::RegKey;

#[link(name = "shell32")]
extern "system" {
    fn IsUserAnAdmin() -> i32;
}

fn main() {
    let options = NativeOptions {
        viewport: ViewportBuilder::default().with_inner_size([460.0, 440.0]),
        ..Default::default()
    };

    let _ = eframe::run_native(
        "üóëÔ∏è PVDP „Ç¢„É≥„Ç§„É≥„Çπ„Éà„Éº„É©„Éº",
        options,
        Box::new(|cc| {
            let mut fonts = FontDefinitions::default();
            fonts.font_data.insert(
                "jp".to_string(),
                FontData::from_static(include_bytes!(concat!(
                    env!("CARGO_MANIFEST_DIR"),
                    "/fonts/NotoSansJP-Regular.ttf"
                ))),
            );
            fonts.families.entry(FontFamily::Proportional).or_default().insert(0, "jp".to_string());
            fonts.families.entry(FontFamily::Monospace).or_default().push("jp".to_string());
            cc.egui_ctx.set_fonts(fonts);

            Box::new(UninstallerApp::default())
        }),
    );
}

#[derive(Default)]
struct UninstallerApp {
    logs: Vec<String>,
    finished: bool,
    failed: bool,
    error_message: Option<String>,
    checked_admin: bool,
}

impl eframe::App for UninstallerApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("üóëÔ∏è PVDP „Ç¢„É≥„Ç§„É≥„Çπ„Éà„Éº„É©„Éº");
            ui.separator();

            if !self.checked_admin {
                unsafe {
                    if IsUserAnAdmin() == 0 {
                        self.failed = true;
                        self.error_message = Some(concat!(
                            "‚ùå ÁÆ°ÁêÜËÄÖ„Å®„Åó„Å¶ÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n",
                            "‚ñ∂ ÊñπÊ≥ïÔºö\n",
                            " - „Ç¢„É≥„Ç§„É≥„Çπ„Éà„Éº„É©„Éº„ÇíÂè≥„ÇØ„É™„ÉÉ„ÇØ ‚Üí„ÄéÁÆ°ÁêÜËÄÖ„Å®„Åó„Å¶ÂÆüË°å„Äè\n",
                            " - „Åæ„Åü„ÅØ„ÄÅShift + Âè≥„ÇØ„É™„ÉÉ„ÇØ ‚Üí„ÄéÁÆ°ÁêÜËÄÖ„Å®„Åó„Å¶ÂÆüË°å„Äè"
                        ).to_string());
                    }
                }
                self.checked_admin = true;
            }

            if self.logs.is_empty() && !self.finished && !self.failed {
                match self.run_uninstall() {
                    Ok(_) => self.finished = true,
                    Err(e) => {
                        self.failed = true;
                        self.error_message = Some(format!("‚ö†Ô∏è „Ç®„É©„Éº: {}", e));
                    }
                }
            }

            for log in &self.logs {
                ui.label(log);
            }

            if self.finished {
                ui.colored_label(egui::Color32::GREEN, "‚úÖ „Ç¢„É≥„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫ÜÔºÅ");
                ui.separator();
                ui.label("‚ö†Ô∏è Êã°ÂºµÊ©üËÉΩ„É™„Çπ„Éà„Å´ÊÆã„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅChrome„ÅÆÊã°ÂºµÊ©üËÉΩ„Éö„Éº„Ç∏„Åß„Ç¥„ÉüÁÆ±„ÇíÊäº„Åó„Å¶ÂâäÈô§„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ");
            }

            if self.failed {
                ui.colored_label(egui::Color32::RED, "‚ùå „Ç¢„É≥„Ç§„É≥„Çπ„Éà„Éº„É´„Å´Â§±Êïó„Åó„Åæ„Åó„ÅüÔºÅ");
                if let Some(err) = &self.error_message {
                    ui.label(err);
                }
            }

            if self.finished || self.failed {
                if ui.button("‚ùé Èñâ„Åò„Çã").clicked() {
                    std::process::exit(0);
                }
            }
        });
    }
}

impl UninstallerApp {
    fn log(&mut self, msg: &str) {
        self.logs.push(format!("üî∏ {}", msg));
    }

    fn run_uninstall(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        let install_dir = PathBuf::from(r"C:\Program Files\primevideo-discord-presence");
        let pvdp_exe = install_dir.join("pvdp.exe");
        let extension_id = "hjngoljbakohoejlcikpfgfmcdjhgppe";

        self.log("üîé pvdp.exe „ÅÆÂÆüË°åÁä∂ÊÖã„ÇíÁ¢∫Ë™ç‰∏≠...");
        if self.is_pvdp_running()? {
            self.log("‚ö†Ô∏è pvdp.exe „ÅåËµ∑Âãï‰∏≠„Åß„Åô„ÄÇÁµÇ‰∫ÜÂá¶ÁêÜ„ÇíË©¶„Åø„Åæ„Åô...");
            let kill = Command::new("cmd")
                .args(["/C", "taskkill /F /IM pvdp.exe"])
                .output()?;

            if kill.status.success() {
                self.log("üõë pvdp.exe „ÇíÊ≠£Â∏∏„Å´ÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü");
            } else {
                let stderr = String::from_utf8_lossy(&kill.stderr);
                return Err(format!(
                    "‚ùå pvdp.exe „ÅÆÁµÇ‰∫Ü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ\n{}\nÊâãÂãï„ÅßÁµÇ‰∫Ü„Åó„Å¶„Åã„ÇâÂÜçÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                    stderr
                ).into());
            }
        } else {
            self.log("‚úÖ pvdp.exe „ÅØËµ∑Âãï„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ");
        }

        self.log("üßπ „Ç§„É≥„Çπ„Éà„Éº„É´„Éï„Ç©„É´„ÉÄ„ÇíÂâäÈô§‰∏≠...");
        if install_dir.exists() {
            // üõë „Éï„Ç°„Ç§„É´„É≠„ÉÉ„ÇØ„ÇÇÁ¢∫Ë™ç„Åó„Å¶„Åã„ÇâÂâäÈô§
            if self.is_file_locked(&pvdp_exe)? {
                return Err("‚ùå pvdp.exe„Åå„Åæ„Å†‰ΩøÁî®‰∏≠„Åß„Åô„ÄÇÊâãÂãï„ÅßÁµÇ‰∫Ü„Åó„Å¶„Åã„ÇâÂÜçÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ".into());
            }

            match fs::remove_dir_all(&install_dir) {
                Ok(_) => {
                    self.log("‚úîÔ∏è „Éï„Ç©„É´„ÉÄÂâäÈô§ÊàêÂäü");
                }
                Err(e) => {
                    return Err(format!("‚ùå „Éï„Ç©„É´„ÉÄÂâäÈô§Â§±Êïó: {}", e).into());
                }
            }
        } else {
            self.log("‚ÑπÔ∏è „Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„Éï„Ç©„É´„ÉÄ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
        }

        self.log("ü™ü „É¨„Ç∏„Çπ„Éà„É™„Ç≠„Éº„ÇíÂâäÈô§‰∏≠...");
        let hkcu = RegKey::predef(HKEY_CURRENT_USER);
        let _ = hkcu.delete_subkey(r"Software\Google\Chrome\NativeMessagingHosts\com.pvdp.discord.presence");
        let _ = hkcu.delete_subkey(&format!("Software\\Google\\Chrome\\Extensions\\{}", extension_id));
        self.log("‚úîÔ∏è „É¨„Ç∏„Çπ„Éà„É™ÂâäÈô§ÂÆå‰∫Ü");

        self.log("üéâ „Ç¢„É≥„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫ÜÔºÅ");
        Ok(())
    }

    fn is_pvdp_running(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let output = Command::new("cmd")
            .args(["/C", "tasklist /FI \"IMAGENAME eq pvdp.exe\""])
            .output()?;

        let output_str = String::from_utf8_lossy(&output.stdout);
        Ok(output_str
            .lines()
            .any(|line| line.to_lowercase().contains("pvdp.exe")))
    }

    fn is_file_locked(&self, path: &PathBuf) -> Result<bool, Box<dyn std::error::Error>> {
        if !path.exists() {
            return Ok(false);
        }
        match OpenOptions::new().write(true).open(path) {
            Ok(_) => Ok(false),
            Err(_) => Ok(true),
        }
    }
}
